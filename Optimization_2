#Optimization 2: Dynamic schedule (finds gaps in queue)

from dataclasses import dataclass
from typing import List, Tuple, Dict
import matplotlib.pyplot as plt
import matplotlib.patches as patches
 
# Constants
VERTICAL_TIME = 16.2 * 2  # down + up in seconds
SHIFT_DURATION = 8 * 60 * 60  # 8 hours in seconds
 
# Horizontal travel times between pools
horizontal_times = {
    (0, 1): 4.1,
    (1, 2): 3.4,
    (2, 3): 3.4,
}
for i in range(3, 21):
    horizontal_times[(i, i + 1)] = 3.3
horizontal_times[(21, 22)] = 4.1  # exit
 
@dataclass
class Bath:
    index: int
    process_time: float
    drain_time: float
    skip: bool
 
@dataclass
class Manipulator:
    index: int
    range_start: int
    range_end: int
    busy_until: float = 0.0
    total_work_time: float = 0.0
 
@dataclass
class Part:
    id: int
    schedule: List[Tuple[int, float, float]]
 
baths = [
    Bath(1, 120, 20, False), Bath(2, 160, 0, False), Bath(3, 220, 20, False), Bath(4, 0, 0, True),
    Bath(5, 60, 15, False), Bath(6, 60, 15, False), Bath(7, 480, 20, False), Bath(8, 0, 0, True),
    Bath(9, 60, 15, False), Bath(10, 0, 0, True), Bath(11, 60, 15, False), Bath(12, 90, 20, False),
    Bath(13, 330, 20, False), Bath(14, 75, 15, False), Bath(15, 75, 15, False), Bath(16, 90, 20, False),
    Bath(17, 75, 15, False), Bath(18, 220, 20, False), Bath(19, 90, 1, False), Bath(20, 90, 1, False),
    Bath(21, 90, 1, False),
]
 
manipulators = [
    Manipulator(1, 0, 3), Manipulator(2, 3, 7), Manipulator(3, 7, 11),
    Manipulator(4, 11, 17), Manipulator(5, 17, 20), Manipulator(6, 20, 22),
]
 
manipulator_usage: Dict[int, List[float]] = {m.index: [] for m in manipulators}
 
def find_manipulator(bath_index: int) -> Manipulator:
    for m in manipulators:
        if m.range_start < bath_index <= m.range_end:
            return m
    raise ValueError(f"No manipulator for bath {bath_index}")
 
def create_schedule_with_shifts(part_id: int, start_time: float) -> Part:
    schedule = []
    current_time = start_time
    for i, bath in enumerate(baths):
        if bath.skip:
            continue
 
        m = find_manipulator(bath.index)
        in_time = max(current_time, m.busy_until)
        out_time = in_time + bath.process_time + bath.drain_time
 
        schedule.append((bath.index, in_time, out_time))
 
        # update for next bath
        if i < len(baths) - 1:
            next_bath = baths[i + 1]
            if not next_bath.skip:
                current_time = out_time + horizontal_times.get((bath.index, next_bath.index), 3.3) + VERTICAL_TIME
            else:
                current_time = out_time + VERTICAL_TIME
 
    return Part(part_id, schedule)
 
def generate_schedules(time_limit: float) -> List[Part]:
    parts = []
    part_id = 1
    current_time = 0
 
    while True:
        part = create_schedule_with_shifts(part_id, current_time)
        latest_out = max(out for _, _, out in part.schedule)
        if latest_out > time_limit:
            break
 
        for bath_index, in_time, out_time in part.schedule:
            m = find_manipulator(bath_index)
            m.busy_until = out_time + VERTICAL_TIME
            m.total_work_time += VERTICAL_TIME
            manipulator_usage[m.index].append(out_time + VERTICAL_TIME)
 
        parts.append(part)
        part_id += 1
        current_time = min(out for _, _, out in part.schedule) + 1
 
    return parts
 
def print_manipulator_takts():
    print("\nManipulator takt times:")
    for m in manipulators:
        times = manipulator_usage[m.index]
        if len(times) > 1:
            takts = [round(times[i + 1] - times[i], 2) for i in range(len(times) - 1)]
            avg_takt = round(sum(takts) / len(takts), 2)
            print(f"Manipulator {m.index}: avg takt = {avg_takt}s, takt list = {takts}")
        elif len(times) == 1:
            print(f"Manipulator {m.index}: only one operation")
        else:
            print(f"Manipulator {m.index}: no operations")
        utilization = round((m.total_work_time / SHIFT_DURATION) * 100, 2)
        print(f" -> Utilization: {utilization}%")
 
def plot_manipulator_usage():
    fig, ax = plt.subplots(figsize=(10, 4))
    for index, times in manipulator_usage.items():
        for t in times:
            ax.plot([t - VERTICAL_TIME, t], [index, index], linewidth=6,
                    label=f"Manipulator {index}" if t == times[0] else "")
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Manipulator Index')
    ax.set_title('Manipulator Activity Over Time')
    ax.grid(True)
    ax.legend()
    plt.tight_layout()
    plt.show()
 
def plot_gantt(parts: List[Part]):
    fig, ax = plt.subplots(figsize=(12, 6))
    colors = ['skyblue', 'lightgreen', 'salmon', 'plum', 'khaki']
    for part in parts:
        for i, (bath_index, start, end) in enumerate(part.schedule):
            color = colors[part.id % len(colors)]
            ax.add_patch(patches.Rectangle((start, bath_index - 0.4), end - start, 0.8,
                                           edgecolor='black', facecolor=color))
            ax.text((start + end) / 2, bath_index, f"Part {part.id}",
                    ha='center', va='center', fontsize=8)
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Bath Number')
    ax.set_title('Gantt Chart of Part Schedules')
    ax.set_yticks([b.index for b in baths if not b.skip])
    ax.grid(True)
    plt.tight_layout()
    plt.show()
 
if __name__ == '__main__':
    parts = generate_schedules(SHIFT_DURATION)
    for part in parts:
        print(f"\nPart {part.id} schedule:")
        for s in part.schedule:
            print(f"Bath {s[0]}: IN {s[1]:.2f}s, OUT {s[2]:.2f}s")
    print(f"\nTotal parts processed in 8-hour shift: {len(parts)}")
    print_manipulator_takts()
    plot_gantt(parts)
    plot_manipulator_usage()
